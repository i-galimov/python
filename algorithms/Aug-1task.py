# В команде Тинькофф произошла реорганизация — объединились два отдела. Новые коллеги хотят сидеть рядом, поэтому офису требуется ремонт.
# Прежние места каждого отдела имели форму прямоугольника. Новая площадка должна быть квадратной, а также содержать предыдущие места, т.к. некоторые разработчики очень привязаны к ним. К сожалению, размеры офиса ограничены, поэтому зона должна иметь минимальную площадь.
# Строители пытаются посчитать, сколько материала им понадобится для ремонта. Для этого им нужно знать итоговую площадь обновленной площадки. Пожалуйста, помогите им
# Формат входных данных
# В первой строке заданы четыре целых числа: ﻿﻿x_1x1​﻿﻿, ﻿﻿y_1y1​﻿﻿, ﻿﻿x_2x2​﻿﻿, ﻿﻿y_2y2​﻿﻿, где ﻿﻿(x_1, y_1)(x1​,y1​)﻿﻿ и ﻿﻿(x_2, y_2)(x2​,y2​)﻿﻿ — координаты левого нижнего и правого верхнего углов прежнего места первого отдела. Известно, что ﻿﻿0 \leq x_1 < x_2 \leq 100≤x1​<x2​≤10﻿﻿ и ﻿﻿0 \leq y_1 < y_2 \leq 100≤y1​<y2​≤10﻿﻿.
# Во второй строке заданы координаты места второго отдела в том же формате, что и первый.
# Гарантируется, что исходные площадки двух отделов не пересекаются, а так же не касаются друг друга.
# Формат выходных данных
# В единственной строке выведите одно число — площадь новой объединенной зоны.

# обрабатываем ввод, записывая в массив строк через пробел и преобразуем в массив чисел
dep1_s = input().split()
dep1 = [int(num_s) for num_s in dep1_s]
dep2_s = input().split()
dep2 = [int(num_s) for num_s in dep2_s]

list_x = [dep1[0], dep1[2], dep2[0], dep2[2]]
list_y = [dep1[1], dep1[3], dep2[1], dep2[3]]
max_x = max(list_x)
min_x = min(list_x)
res_x = (max_x - min_x) ** 2
max_y = max(list_y)
min_y = min(list_y)
res_y = (max_y - min_y) ** 2
if res_x > res_y:
	print(res_x)
else:
	print(res_y)

# находим расстояния между точками по модулю

# list_dep = [abs(dep1[0] - dep2[0]), abs(dep1[0] - dep2[2]), abs(dep1[2] - dep2[2]), abs(dep1[2] - dep2[0]), abs(dep1[1] - dep2[1]), abs(dep1[3] - dep2[3]), abs(dep1[1] - dep2[3]), abs(dep1[3] - dep2[1])]

# находим максимальное значение по модулю и возводим его в квадрат для расчета площади фигуры, выводим получившееся значение
# res = max(list_dep) * max(list_dep)
# print(res)

